{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww18760\viewh20420\viewkind1
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs24 \cf0 Pyaudio callback and Tkinter
\b0 \
\
In the demos 
\b Tkinter (part 1)
\b0  we used the form\
\

\i top = Tk.Tk()\
...\
top.mainloop()\

\i0 \
where the line top.mainloop() keeps the GUI running until it is closed. We do not need to write a loop.\
\
In contrast, in the demos 
\b TKinter (part 2 - audio)
\b0  we used the form\
\

\i top = Tk.Tk()\
...\
while PLAY:\
  top.update()\
  ...\

\i0 \
where top.update() updates the GUI. We do not use mainloop() to keep the programming running because the program will run due to the loop that generates the audio signal. For example, see the demo programs: \
\
   play_sine_buttons.py\
   play_sine_slider.py\
\
However, there is another way to use Tkinter and Pyaudio together. We can use a pyaudio callback function (instead of a loop) to generate audio, and we keep the programming running using mainloop(). For example, see the demo programs:\
\
   play_sine_buttons_callback\
   play_sine_slider_callback\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}