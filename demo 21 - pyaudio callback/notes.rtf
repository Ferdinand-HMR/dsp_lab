{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww18560\viewh19900\viewkind1
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc

\f0\b\fs24 \cf0 Callback functions in Pyaudio
\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
In the callback method, we do not call stream.read() or stream.write().  See the 
\i stream_callback 
\i0 in the Pyaudio documentation: \
\
http://people.csail.mit.edu/hubert/pyaudio/docs/\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b \cf0 stream_callback
\b0 \
Specifies a callback function for non-blocking (callback) operation.\
If no callback function is specified, then blocking operation is used\
(i.e., stream.read() and stream.write() for reading input and writing output\
to/from audio stream).\
\
To use non-blocking operation, specify a callback function as follows:\
\
callback(in_data,      # recorded data if input=True; else None\
         frame_count,  # number of frames\
         time_info,    # dictionary\
         status_flags) # PaCallbackFlags\
\
The callback function must return a tuple: (out_data, flag)\
\

\b Demo programs\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b0 \cf0 \
demo_01_play_wavefile.py\
demo_02_simple_wire.py\
demo_03_simple_wire_gain.py\
demo_04_simple_wire_gain_stereo.py\
demo_05_simple_wire_gain_stereo_AM.py\
demo_06_record_wavefile.py\
demo_07_record_wavefile_stereo.py\
demo_08_record_and_play.py\
demo_09_record_and_play_ver2.py\
demo_10_record_and_play_vibrato.py\
}